Still a work in progress

=========
CLIENT SIDE
=========

Very basic page example:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <!--This includes the request function to talk to the server-->
    <script src="request.js"></script>
    <title>NodePY Example</title>
</head>
<body>
    <h3>Welcome to NodePY. A stupid simple Python3 web framework</h3>
    <button onclick="testResponse()">Test NodePY</button>
    <p id="test_result">This should change to the current server side time when you press the above button. </p>
    <script>
        function testResponse(){
            function updatePage(data){
                document.getElementById("test_result").innerHTML = data;
            }
            request("serverTime&now", updatePage);
        }
    </script>
</body>
</html>


Couple of things to watch out for as a new web programmer. The syntax of the <script> block is a bit odd. This is due to 
javascript's asyncronous nature, as it, it will happily move on even if a function call has not completed. This is best handled as shown below

function testResponse(){
    function updatePage(data){
        document.getElementById("test_result").innerHTML = data;
    }
    request("serverTime&now", updatePage);
}

There are 2 moving components to this part. The first is the function defined previously (updatePage). What it does is provide a "call back" to the network request. 
Essentially, the request function gets started and then the browser just, moves on, to the next line of javascript. What the call back function provides
is a way for the request function to let the requestor function know that the data is ready, by directly calling that function. The workflow can be diagramed as

1. request(api_call, callBackFunction) -> callBackFunction(server_data)
2. Whatever the next line of javascript is (can be executed before callBackFunction)

=========
SERVER SIDE
==========

1. Create your API in the calls/ directory. The server will spider that directory on startup and add import those files. 
2. There are constraints on the python files in the calls directory. They are as follows:
    a. The file must end with .py and must be python3 compatable. 
    b. The file must have a main function. This is what is called when the server receives a request for that file. 
    c. The main function must take a single argument. This will be a list object with strings of the arguments that the server recieved. 
       This list object may be empty. 

