Still a work in progress

CLIENT SIDE

Very basic page example:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <!--This includes the request function to talk to the server-->
    <script src="request.js"></script>
    <title>NodePY Example</title>
</head>
<body>
    <h3>Welcome to NodePY. A stupid simple Python3 web framework</h3>
    <button onclick="testResponse()">Test NodePY</button>
    <p id="test_result">This should change to the current server side time when you press the above button. </p>
    <script>
        function testResponse(){
            function updatePage(data){
                document.getElementById("test_result").innerHTML = data;
            }
            request("serverTime&now", updatePage);
        }
    </script>
</body>
</html>


Couple of things to watch out for as a new web programmer. The syntax of the <script> block is a bit odd. This is due to 
javascript's asyncronous nature, as it, it will happily move on even if a function call has not completed. This is best handled as shown below

function testResponse(){
    function updatePage(data){
        document.getElementById("test_result").innerHTML = data;
    }
    request("serverTime&now", updatePage);
}

There are 2 moving componenets to this part. The first is the function defined previously (updatePage). What it does is provide a "call back" to the network request. 
Essentially, the request function gets started before 