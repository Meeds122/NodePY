This framework has 2 parts, a server that serves static content such as apache, lighttpd, or nginx, and a server that serves the active content, the python backend. 
The function that passes requests from the client to the server is in the requests.js file and needs to be modified to fit your enviroment. 
The api calls you can define are defined in server/calls/ directory. 

Here is an walkthrough of the workflow

client side:
onclick event triggers js function which triggers the requests.js->request(call) function. The call variable gets requested from the api server. 

server side:
server.py->Server() recieves an HTTP request. it strips everything off of it except the call. server.py->Server() then calls api.py->apiCall(call). 
api.py->apiCall(call) looks in the server/calls/ directory for a python file with the same name as the call function. It then calls that function with the rest of the 
call passed in as variables. 


call definition:
http://someHost:somePort/functionName&input1&input2

Calls are seperated by the ampersand character. 

Framework Responsibility:
Provide api call service and organization

Programmer Responsibility:
Define js files for added frontend functionality.
Define py files for added backend functionality.

I.E all the framework does for you is allow request.js to call python functions as defined in server/calls/. 

Timeline:

X 1. Get working client side

X 2. Start with simple socket

/ 3. Start with basic interpretation, dissection, and response

  4. Finalize flexible responsiveness

  5. Include option for SSL

  6. Implement queing and cocurrency/threading in server backend


Current issues:
1. javascript client side is complaining about content size mismatch. 

Raw HTTP request example:

GET /serverTime&now HTTP/1.1
Host: 127.0.0.1:31337
Connection: keep-alive
Origin: null
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36
DNT: 1
Accept: */*
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9


Raw HTTP response example

HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
Content-Length: 88
Content-Type: text/html
Connection: Closed
